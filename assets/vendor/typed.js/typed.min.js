// typed.js - A JavaScript Typing Animation Library
// Author: Matt Boldt <me@mattboldt.com>
// Version: v3.0.0
// Url: https://github.com/mattboldt/typed.js
// License(s): MIT

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function ($) {
  'use strict';

  var Typed = function (el, options) {
    // Initialize varibles
    this.el = $(el);
    this.options = $.extend({}, Typed.defaults, options);
    this.isDeleting = false;

    // Create type speed
    this.typeSpeed = this.options.typeSpeed;

    // Create back speed
    this.backSpeed = this.options.backSpeed;

    // Create loop speed
    this.loopSpeed = this.options.loopSpeed;

    // Create show cursor
    this.showCursor = this.options.showCursor;

    // Create cursor char
    this.cursorChar = this.options.cursorChar || '|';

    // Create element string
    this.elementString = '';

    // Create array
    this.arrayPos = 0;

    // Create attr
    this.attr = this.options.attr || null;

    // Initialize
    this.init();
  };

  Typed.prototype = {
    constructor: Typed,

    init: function () {
      // Determine what text to type
      if (this.attr) {
        this.elementString = this.attr.value;
      } else if (this.options.strings) {
        this.options.strings[this.arrayPos].split('').forEach(function (letter) {
          this.elementString += '<span>' + letter + '</span>';
        }, this);
      }

      // Add element to DOM
      this.el.html(this.elementString);

      // Loop through each string and type it out
      this.loop();
    },

    loop: function () {
      this.type();

      // If looping is enabled and we've reached the last string, start again
      if (this.shouldLoop && this.arrayPos === this.options.strings.length - 1) {
        this.arrayPos = 0;
      }

      // If we've reached the end of the current string, delete it and start a new one
      if (
        this.isDeleting &&
        this.backSpeed === 0 ||
        this.arrayPos === this.options.strings.length
      ) {
        // Delete the current string
        this.delete();

        // If we've reached the end of the strings, stop
        if (this.arrayPos === this.options.strings.length) {
          return;
        }

        // Move to the next string
        this.arrayPos++;

        // If we've reached the last string, stop
        if (this.arrayPos === this.options.strings.length) {
          return;
        }

        // If we're deleting the last string, stop
        if (this.isDeleting && this.backSpeed === 0) {
          return;
        }
      }

      // If we're typing, increase the type speed
      if (!this.isDeleting && this.typeSpeed) {
        this.typeSpeed += this.options.startDelay / this.options.strings.length;
      }

      // If we're deleting, increase the back speed
      if (this.isDeleting && this.backSpeed) {
        this.backSpeed += this.options.startDelay / this.options.strings.length;
      }

      // If we're typing, show the cursor
      if (this.showCursor && !this.isDeleting) {
        this.cursor();
      }

      // If we're deleting, hide the cursor
      if (this.showCursor && this.isDeleting) {
        this.hideCursor();
      }

      // Loop the function
      var that = this;
      setTimeout(function () {
        that.loop();
      }, this.options.loopSpeed);
    },

    type: function () {
      // Set the delay between each letter
      var delay = this.typeSpeed / 2;

      // Get the next letter
      var nextLetter = this.options.strings[this.arrayPos].substr(
        this.elementString.length,
        1
      );

      // If the next letter exists
      if (nextLetter) {
        // Add it to the element string
        this.elementString += nextLetter;

        // Insert the next letter into the DOM
        this.el.html(this.elementString);

        // Increase the array position
        this.arrayPos++;

        // If we've reached the end of the string, reset the delay
        if (this.elementString.length === this.options.strings[this.arrayPos].length) {
          delay = this.options.loopSpeed;
        }
      }

      // If we're not at the last character, type the next one
      if (
        this.elementString.length <
        this.options.strings[this.arrayPos].length
      ) {
        setTimeout(function () {
          that.type();
        }, delay);
      }

      // If we're at the last character, toggle deleting
      if (
        this.elementString.length ===
        this.options.strings[this.arrayPos].length
      ) {
        this.isDeleting = true;
      }
    },

    delete: function () {
      // Set the delay between each letter
      var delay = this.backSpeed / 2;

      // Get the previous letter
      var nextLetter = this.options.strings[this.arrayPos].substr(
        this.elementString.length - 1,
        1
      );

      // If the next letter exists
      if (nextLetter) {
        // Remove it from the element string
        this.elementString = this.elementString.substr(
          0,
          this.elementString.length - 1
        );

        // Remove the previous letter from the DOM
        this.el.html(this.elementString);

        // Decrease the array position
        this.arrayPos--;

        // If we've reached the first character of the string, reset the delay
        if (this.elementString.length === 0) {
          delay = this.options.loopSpeed;
        }
      }

      // If we're not at the first character, delete the next one
      if (this.elementString.length > 0) {
        setTimeout(function () {
          that.delete();
        }, delay);
      }

      // If we're at the first character, toggle typing
      if (this.elementString.length === 0) {
        this.isDeleting = false;
      }
    },

    cursor: function () {
      // If we're not at the last character, show the cursor
      if (
        this.elementString.length <
        this.options.strings[this.arrayPos].length
      ) {
        this.el
          .find('span')
          .last()
          .after('<span class="typed-cursor">' + this.cursorChar + '</span>');
      }

      // If we're at the last character, hide the cursor
      if (
        this.elementString.length ===
        this.options.strings[this.arrayPos].length
      ) {
        this.el.find('.typed-cursor').remove();
      }
    },

    hideCursor: function () {
      this.el.find('.typed-cursor').remove();
    }
  };

  Typed.defaults = {
    strings: [''],
    typeSpeed: 40,
    startDelay: 1000,
    backSpeed: 20,
    loopSpeed: 1000,
    showCursor: true,
    cursorChar: '|',
    attr: null
  };

  // jQuery plugin
  $.fn.typed = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('typed');
      var options = typeof option === 'object' && option;

      if (!data) $this.data('typed', (data = new Typed(this, options)));
      if (typeof option === 'string') data[option]();
    });
  };

  return Typed;
});
